[gd_scene load_steps=9 format=3 uid="uid://xr0y4mjrt712"]

[ext_resource type="Texture2D" uid="uid://c18fbqe5b737w" path="res://textures/sprites/charles_l1.png" id="1_8b5y5"]
[ext_resource type="Texture2D" uid="uid://cdspqq4bbprbj" path="res://textures/sprites/charles_r1.png" id="2_wme5i"]
[ext_resource type="Texture2D" uid="uid://crrr1x5xoylmd" path="res://textures/sprites/charles_l2.png" id="3_e4m0h"]
[ext_resource type="Texture2D" uid="uid://cvla836fksmhm" path="res://textures/sprites/charles_r2.png" id="4_6wsk0"]

[sub_resource type="GDScript" id="GDScript_celkc"]
script/source = "extends CharacterBody2D

@export var speed := 500.0
@export var jump_velocity := 1500.0
@export var allow_double_jump := true
@export var facing_direction := FACING_DIRECTION.RIGHT

enum STATE {
	STILL,
	WALKING,
}

enum FACING_DIRECTION {
	LEFT,
	RIGHT,
}

var state := STATE.STILL

const COYOTE_TIME_DELAY := 0.1
const MAX_FALLING_SPEED := 1500.0
var _coyote_time := 0.0
var _double_jump := true

func _use_double_jump() -> bool:
	if allow_double_jump && _double_jump:
		_double_jump = false
		return true
	return false
 
func _physics_process(delta: float) -> void:

	## Get the input direction and handle the movement/deceleration.
	var direction := Input.get_axis(\"ui_left\", \"ui_right\")
	if direction:
		velocity.x = direction * speed
	else:
		velocity.x = move_toward(velocity.x, 0, speed)
	
	## Add the gravity.
	if not is_on_floor():
		velocity += get_gravity() * delta
		if velocity.y > MAX_FALLING_SPEED:
			velocity.y = MAX_FALLING_SPEED

	## Handle jump.
	
	# coyote time
	if is_on_floor():
		_coyote_time = COYOTE_TIME_DELAY
	else:
		_coyote_time -= delta
		if _coyote_time < 0:
			_coyote_time = 0
	var can_jump := _coyote_time > 0

	# double jump
	if is_on_floor():
		_double_jump = true

	# jump
	if Input.is_action_just_pressed(\"ui_up\") and (can_jump or _use_double_jump()):
		velocity.y = -jump_velocity
		_coyote_time = 0

	# state
	if velocity.x:
		state = STATE.WALKING
		facing_direction = FACING_DIRECTION.RIGHT if velocity.x > 0 else FACING_DIRECTION.LEFT
	else:
		state = STATE.STILL

	move_and_slide()
"

[sub_resource type="SpriteFrames" id="SpriteFrames_b1piu"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("1_8b5y5")
}],
"loop": true,
"name": &"still_left",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("2_wme5i")
}],
"loop": true,
"name": &"still_right",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("3_e4m0h")
}, {
"duration": 1.0,
"texture": ExtResource("1_8b5y5")
}],
"loop": true,
"name": &"walk_left",
"speed": 8.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("4_6wsk0")
}, {
"duration": 1.0,
"texture": ExtResource("2_wme5i")
}],
"loop": true,
"name": &"walk_right",
"speed": 8.0
}]

[sub_resource type="GDScript" id="GDScript_vd1cr"]
script/source = "extends AnimatedSprite2D

func _process(_delta: float) -> void:
	var character := get_node(\"..\")
	play(
		(\"walk_\" if character.state == character.STATE.WALKING else \"still_\")
		+ (\"right\" if character.facing_direction == character.FACING_DIRECTION.RIGHT else \"left\"))
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_38sdo"]
size = Vector2(49, 99)

[node name="Charles" type="CharacterBody2D"]
script = SubResource("GDScript_celkc")

[node name="Camera2D2" type="Camera2D" parent="."]

[node name="characterAnimation2" type="AnimatedSprite2D" parent="."]
position = Vector2(1, -23)
scale = Vector2(0.5, 0.5)
sprite_frames = SubResource("SpriteFrames_b1piu")
animation = &"still_right"
script = SubResource("GDScript_vd1cr")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(1.5, -12.5)
shape = SubResource("RectangleShape2D_38sdo")
